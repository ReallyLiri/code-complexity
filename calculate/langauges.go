package calculate

type Language = string

var languageToExtensions = map[Language][]string{
	"java":       {"java"},
	"csharp":     {"cs", "cshtml"},
	"node":       {"js", "jsx", "ts", "tsx"},
	"python":     {"py", "py3", "py2"},
	"kotlin":     {"kt", "kts", "ktm"},
	"c":          {"c", "h"},
	"cpp":        {"cpp", "cxx", "cc", "hpp", "hh", "txx", "tpp"},
	"objectivec": {"m", "mm"},
	"swift":      {"swift"},
	"ruby":       {"rb"},
	"go":         {"go"},
	"rust":       {"rs"},
	"scala":      {"scala", "sc"},
}

var extensionToLanguage = make(map[Language]string)

var languageToKeywords = map[Language][]string{
	"java": {
		"break",
		"case",
		"catch",
		"class",
		"continue",
		"do",
		"else",
		"enum",
		"extends",
		"finally",
		"for",
		"goto",
		"if",
		"implement",
		"imports",
		"interface",
		"return",
		"switch",
		"throw",
		"try",
		"while",
	},
	"csharp": {
		"await",
		"break",
		"case",
		"catch",
		"class",
		"continue",
		"delegate",
		"do",
		"else",
		"enum",
		"event",
		"extern",
		"finally",
		"for",
		"foreach",
		"goto",
		"if",
		"init",
		"interface",
		"return",
		"struct",
		"switch",
		"throw",
		"try",
		"while",
		"from",
		"get",
		"set",
		"join",
		"let",
		"using",
		"yield",
	},
	"node": {
		"await",
		"break",
		"case",
		"catch",
		"class",
		"continue",
		"do",
		"else",
		"enum",
		"eval",
		"extends",
		"finally",
		"for",
		"function",
		"goto",
		"if",
		"implements",
		"import",
		"in",
		"interface",
		"package",
		"return",
		"switch",
		"try",
		"while",
		"with",
		"yield",
	},
	"python": {
		"break",
		"class",
		"continue",
		"def",
		"elif",
		"else",
		"except",
		"finally",
		"for",
		"from",
		"if",
		"import",
		"in",
		"lambda",
		"pass",
		"raise",
		"return",
		"try",
		"yield",
		"with",
		"while",
	},
	"kotlin": {
		"break",
		"class",
		"continue",
		"do",
		"else",
		"for",
		"fun",
		"if",
		"interface",
		"return",
		"throw",
		"try",
		"typealias",
		"when",
		"while",
		"catch",
		"constructor",
		"delegate",
		"field",
		"finally",
		"get",
		"import",
		"init",
		"property",
		"receiver",
		"set",
		"setparam",
		"where",
		"enum",
	},
	"c": {
		"break",
		"case",
		"continue",
		"do",
		"else",
		"for",
		"goto",
		"if",
		"return",
		"struct",
		"switch",
		"typedef",
		"union",
		"while",
		"enum",
		"#define",
		"#ifdef",
		"#ifndef",
		"#include",
	},
	"cpp": {
		"break",
		"case",
		"catch",
		"class",
		"continue",
		"do",
		"else",
		"for",
		"goto",
		"if",
		"namespace",
		"return",
		"struct",
		"switch",
		"template",
		"throw",
		"try",
		"typename",
		"typedef",
		"union",
		"using",
		"while",
		"#define",
		"#ifdef",
		"#ifndef",
		"#include",
	},
	"objectivec": {
		"break",
		"case",
		"continue",
		"do",
		"else",
		"enum",
		"for",
		"goto",
		"if",
		"return",
		"struct",
		"switch",
		"typedef",
		"union",
		"while",
		"#import",
		"@import",
	},
	"swift": {
		"class",
		"deinit",
		"enum",
		"extension",
		"func",
		"import",
		"init",
		"protocol",
		"struct",
		"subscript",
		"typealias",
		"break",
		"case",
		"continue",
		"do",
		"else",
		"fallthrough",
		"for",
		"if",
		"in",
		"return",
		"switch",
		"where",
		"while",
		"didSet",
		"get",
		"set",
		"willSet",
	},
	"ruby": {
		"begin",
		"break",
		"case",
		"class",
		"def",
		"do",
		"else",
		"elsif",
		"end",
		"ensure",
		"for",
		"if",
		"in",
		"include",
		"load",
		"module",
		"next",
		"redo",
		"rescue",
		"retry",
		"return",
		"require",
		"require_relative",
		"then",
		"unless",
		"until",
		"when",
		"while",
		"yield",
	},
	"go": {
		"break",
		"case",
		"continue",
		"defer",
		"else",
		"fallthrough",
		"for",
		"func",
		"go",
		"goto",
		"if",
		"import",
		"interface",
		"range",
		"return",
		"select",
		"struct",
		"switch",
	},
	"rust": {
		"break",
		"continue",
		"else",
		"enum",
		"extern",
		"fn",
		"for",
		"if",
		"impl",
		"loop",
		"match",
		"return",
		"struct",
		"trait",
		"use",
		"where",
		"while",
		"async",
		"await",
		"do",
		"macro",
		"yield",
		"try",
		"union",
		"macro_rules",
	},
	"scala": {
		"case",
		"catch",
		"class",
		"def",
		"do",
		"else",
		"extends",
		"finally",
		"for",
		"forSome",
		"if",
		"import",
		"match",
		"return",
		"throw",
		"trait",
		"try",
		"type",
		"while",
		"with",
		"yield",
	},
}

var languagesWithAtSignPrefix = map[Language]bool{
	"java":      true,
	"objectivec": true,
	"python":    true,
	"kotlin":    true,
	"scala":     true,
	"node":      true,
}

func init() {
	for language, extensions := range languageToExtensions {
		for _, extension := range extensions {
			extensionToLanguage[extension] = language
		}
	}
}

func tryGetLanguage(ext string) (Language, bool) {
	language, found := extensionToLanguage[ext]
	return language, found
}
